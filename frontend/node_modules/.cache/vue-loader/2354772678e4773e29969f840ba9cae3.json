{"remainingRequest":"/home/mg/java/exj-iths/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mg/java/exj-iths/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mg/java/exj-iths/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mg/java/exj-iths/frontend/src/components/pages/DailyPage.vue?vue&type=template&id=1b5a5b3d&scoped=true&","dependencies":[{"path":"/home/mg/java/exj-iths/frontend/src/components/pages/DailyPage.vue","mtime":1592087092684},{"path":"/home/mg/java/exj-iths/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mg/java/exj-iths/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/mg/java/exj-iths/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mg/java/exj-iths/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}