{"remainingRequest":"/home/mg/java/exj-iths/frontend/node_modules/babel-loader/lib/index.js!/home/mg/java/exj-iths/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/mg/java/exj-iths/frontend/src/store/modules/countriesStore.js","dependencies":[{"path":"/home/mg/java/exj-iths/frontend/src/store/modules/countriesStore.js","mtime":1592087092684},{"path":"/home/mg/java/exj-iths/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mg/java/exj-iths/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/mg/java/exj-iths/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/mg/java/exj-iths/frontend/src/store/modules/countriesStore.js"],"names":["axios","userStore","host","state","countries","detailed","total","dailyByDate","dailyByName","dailyByCode","getters","actions","fetchCountries","commit","get","response","data","fetchCountriesDetailed","deleteCountryAction","id","method","url","config","headers","latestTotalsAction","dailyByDateAction","date","dailyByNameAction","name","dailyByCodeAction","code","setStatus","status","mutations","setDailyByDate","setDailyByName","setDailyByCode","setTotal","setCountries","setDetailed","deleteCountry","filter","c"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport axios from \"axios\";\nimport userStore from \"./userStore\";\n/* eslint-enable */\n// eslint-disable-next-line no-unused-vars\n\nconst host = \"http://localhost:7000\"\n//const host = \"http://13.53.139.53:7000\"\n\n\nconst state = {\n  countries: [],\n  detailed: false,\n  total: {},\n  dailyByDate: {},\n  dailyByName: {},\n  dailyByCode: {}\n};\n\n\nconst getters = {\n  countries: state => state.countries,\n  detailed: state => state.detailed,\n  total: state => state.total,\n  dailyByDate: state => state.dailyByDate,\n  dailyByName: state => state.dailyByName,\n  dailyByCode: state => state.dailyByCode\n};\n\n\nconst actions = {\n  async fetchCountries({ commit }) {\n    const response = await axios.get(`${host}/covid19/country`)\n    commit(\"setCountries\", response.data)\n  },\n  async fetchCountriesDetailed({ commit }) {\n    const response = await axios.get(`${host}/covid19/country/*`)\n    commit(\"setCountries\", response.data)\n  },\n  async deleteCountryAction({ commit }, id) {\n    axios({\n      method: 'delete',\n      url: `${host}/covid19/country/100`,\n      config: {\n          headers: {\n            'Access-Control-Allow-Origin': `${host}/*`,\n            'origin':\"*\"\n          }\n      }\n   })\n    commit(\"deleteCounty\", id)\n  },\n  async latestTotalsAction({ commit }) {\n    const response = await axios.get(`${host}/covid19/api/total/*`)\n    commit(\"setTotal\", response.data[0])\n  },\n  async dailyByDateAction({ commit }, date) {\n    const response = await axios.get(`${host}/covid19/api/countries/date/${date}/name/any/*`)\n    commit(\"setDailyByDate\", response.data[0])\n  },\n  async dailyByNameAction({ commit }, name) {\n    const response = await axios.get(`${host}/covid19/api/countries//name/${name}/*`)\n    commit(\"setDailyByName\", response.data[0])\n  },\n  async dailyByCodeAction({ commit }, code) {\n    const response = await axios.get(`${host}/covid19/api/countries/code/${code}/*`)\n    commit(\"setDailyByCode\", response.data[0])\n  },\n  setStatus({commit}, status){\n    commit(\"setDetailed\", status)\n  },\n};\n\n\nconst mutations = {\n  setDailyByDate: (state, data) => state.dailyByDate = data,\n  setDailyByName: (state, data) => state.dailyByName = data,\n  setDailyByCode: (state, data) => state.dailyByCode = data,\n  setTotal: (state, total) => state.total = total,\n  setCountries: (state, data) => state.countries = data,\n  setDetailed: (state, status) => state.detailed = status,\n  deleteCountry: (state, id) => state.countries = state.countries.filter(c => c.id != id)\n};\n\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};\n"]}]}