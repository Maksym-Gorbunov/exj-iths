{"remainingRequest":"/home/mg/java/exj-iths/frontend/node_modules/babel-loader/lib/index.js!/home/mg/java/exj-iths/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/mg/java/exj-iths/frontend/src/store/modules/apiStore.js","dependencies":[{"path":"/home/mg/java/exj-iths/frontend/src/store/modules/apiStore.js","mtime":1592087092684},{"path":"/home/mg/java/exj-iths/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mg/java/exj-iths/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/mg/java/exj-iths/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/mg/java/exj-iths/frontend/src/store/modules/apiStore.js"],"names":["axios","host","state","apiResponse","data","description","processing","getters","actions","getListOfCountries","commit","get","response","OpenAPIDocumentation","getLatestTotals","getDailyReportTotals","getDailyReportByCountryName","getLatestAllCountries","getLatestCountryDataByCode","getLatestCountryDataByName","getDailyReportByCountryCode","getDailyReportAllCountries","mutations","setApiResponse","setApiResponseDescription","setProcessing","status"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport axios from \"axios\";\n/* eslint-enable */\n// eslint-disable-next-line no-unused-vars\n\n//const covid19Url1 = \"https://covid-19-data.p.rapidapi.com\"\nconst host = \"http://localhost:7000\"\n//const host = \"http://13.53.139.53:7000\"\n\nconst state = {\n  apiResponse: {\n    data: {},\n    description: {}\n  },\n  processing: false\n};\n\n\nconst getters = {\n  apiResponse: state => state.apiResponse,\n  processing: state => state.processing\n};\n\n\nconst actions = {\n    \n    async getListOfCountries({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/countries/*`)\n        var description = \"Get a Name, Alpha-2 code, Alpha-3 code, Latitude and Longitude for every country.\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n\n    async OpenAPIDocumentation({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/docs/*`)\n        var description = \"Get OpenAPI Specification in JSON format\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n\n    async getLatestTotals({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/total/*`)\n        var description = \"Get latest data for whole world.\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n    \n    async getDailyReportTotals({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/total/date/2020-04-01/*`)\n        var description = \"Get daily report data for the whole world. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter.\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n\n    async getDailyReportByCountryName({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/countries/date/2020-04-02/name/italy/*`)\n        var description = \"Get a daily report for a specific country by country name. Parameters name and date are mandatory. Date format is by ISO 8601 standard, but you can provide different format with\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n\n    async getLatestAllCountries({ commit }) {\n      state.processing = true\n      var description = \"Get latest data for all countries.\"\n      var data = \"NOT ALLOWED!!! The plan you are subscribed to does not allow access to this endpoint. Please upgrade your plan or contact API Provider\"\n      commit(\"setApiResponseDescription\", description)\n      commit(\"setApiResponse\", data)\n    },\n\n    async getLatestCountryDataByCode({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/countries/code/it/*`)\n        var description = \"Get the latest data for a specific country. Parameter code is mandatory. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n\n    async getLatestCountryDataByName({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/countries/name/usa/*`)\n        var description = \"Get latest data for specific country. Country Name And Format Are In Query.\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n\n    async getDailyReportByCountryCode({ commit }) {\n        state.processing = true\n        const response = await axios.get(`${host}/covid19/api/countries/date/2020-04-01/code/it/*`)\n        var description = \"Get a daily report for a specific country by country code. Parameters code and date are mandatory. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter. In a few days will be provided a stable version of this endpoint, for now, if you have any suggestions you can put on a discussion board.\"\n        commit(\"setApiResponseDescription\", description)\n        commit(\"setApiResponse\", response.data)\n    },\n\n    async getDailyReportAllCountries({ commit }) {\n      state.processing = true\n      var description = \"Get a daily report for all countries. Parameter date is mandatory. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter. In a few days will be provided a stable version of this endpoint, for now, if you have any suggestions you can put on a discussion board.\"\n      var data = \"NOT ALLOWED!!! The plan you are subscribed to does not allow access to this endpoint. Please upgrade your plan or contact API Provider\"\n      commit(\"setApiResponseDescription\", description)\n      commit(\"setApiResponse\", data)\n  },\n};\n\n\nconst mutations = {\n  setApiResponse: (state, data) => {\n    state.apiResponse.data = data\n    state.processing = false\n  },\n  setApiResponseDescription: (state, description) => (state.apiResponse.description = description),\n  setProcessing:(state, status) => (state.processing = status)\n};\n\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};\n"]}]}